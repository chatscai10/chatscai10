console.log("Loading fixed salary-view-logic.js");

// 修复getSystemParameter函数重复定义问题
// 保留一个全局函数，添加更多的容错机制和日志
async function getSystemParameter(collection, paramName, defaultValue = '0') {
    if (!salaryViewDb) {
        console.warn(`无法获取系统参数 ${collection}.${paramName}: 数据库未初始化`);
        return defaultValue;
    }
    
    try {
        // 首先尝试从settings集合获取
        const docRef = salaryViewDb.collection('settings').doc(collection);
        const doc = await docRef.get();
        
        if (doc.exists && doc.data() && doc.data()[paramName] !== undefined) {
            return doc.data()[paramName];
        }
        
        // 如果未找到，尝试从system_config集合获取
        const configRef = salaryViewDb.collection('system_config').doc('parameters');
        const configDoc = await configRef.get();
        
        if (configDoc.exists && configDoc.data() && 
            configDoc.data()[collection] && 
            configDoc.data()[collection][paramName] !== undefined) {
            return configDoc.data()[collection][paramName];
        }
        
        // 如果仍未找到，尝试从parameters集合获取 (兼容旧版本)
        const oldDocRef = salaryViewDb.collection('parameters').doc(collection);
        const oldDoc = await oldDocRef.get();
        
        if (oldDoc.exists && oldDoc.data() && oldDoc.data()[paramName] !== undefined) {
            return oldDoc.data()[paramName];
        }
        
        console.warn(`未找到系统参数 ${collection}.${paramName}，使用默认值: ${defaultValue}`);
        return defaultValue;
    } catch (error) {
        console.error(`获取系统参数 ${collection}.${paramName} 时出错:`, error);
        return defaultValue; // 出现任何错误时返回默认值
    }
}

// 修复available-bonus-tasks容器找不到问题
function findContainerSafely(containerId, fallbackSelectors = []) {
    // 首先尝试使用ID直接查找
    let container = document.getElementById(containerId);
    
    // 如果找不到，尝试使用querySelectorAll
    if (!container) {
        container = document.querySelector(`#${containerId}`);
    }
    
    // 如果仍然找不到，尝试fallback选择器
    if (!container && fallbackSelectors.length > 0) {
        for (const selector of fallbackSelectors) {
            container = document.querySelector(selector);
            if (container) {
                console.log(`找到容器使用备选选择器: ${selector}`);
                break;
            }
        }
    }
    
    // 如果所有尝试都失败，显示详细的调试信息
    if (!container) {
        console.error(`找不到容器: #${containerId}，尝试了以下备选: ${fallbackSelectors.join(', ')}`);
        // 打印所有可能的父级容器，以帮助调试
        const allDivs = document.querySelectorAll('div[id]');
        if (allDivs.length > 0) {
            console.log('页面上的所有div元素ID:');
            Array.from(allDivs).forEach(div => {
                console.log(` - ${div.id}`);
            });
        }
    }
    
    return container;
}

// 使用更健壮的方式加载bonus任务
async function loadAvailableBonusTasksSection() {
    const containerId = 'available-bonus-tasks';
    
    // 使用更健壮的方法获取容器
    const fallbackSelectors = [
        '#available-bonus-tasks .section-content',
        '.section-content',
        '.info-section',
        '#bonus-history', // 尝试相邻容器
        'body' // 最后的备选
    ];
    
    const container = findContainerSafely(containerId, fallbackSelectors);
    
    // 如果实在找不到任何容器，创建一个
    const actualContainer = container || document.createElement('div');
    if (!container) {
        actualContainer.id = 'fallback-bonus-tasks-container';
        document.body.appendChild(actualContainer);
    }
    
    showLoading(actualContainer, '載入可選任務中...');

    if (!salaryViewDb || !currentUserDetails) {
        actualContainer.innerHTML = '<p class="error-message">無法載入任務，缺少用戶資料或資料庫連接。</p>';
        return Promise.reject("Missing DB or user details for loading available tasks.");
    }

    try {
        const now = new Date();
        // 計算年資天數，使用備用方案
        let userTenureDays = 0;
        if (currentUserDetails.hireDateObject) {
            userTenureDays = calculateTenureDays(currentUserDetails.hireDateObject, now);
            console.log(`Calculated tenure days: ${userTenureDays} from hire date:`, currentUserDetails.hireDateObject);
        } else {
            console.warn("No valid hire date found for tenure calculation. Defaulting to 0 days.");
        }

        // 使用用戶等級，搭配備用方案
        const userLevel = currentUserDetails.level !== undefined 
            ? currentUserDetails.level 
            : (currentUser?.roles?.level || 1); // 備用：從session或使用預設值
        
        console.log(`Using user level ${userLevel} for bonus task query`);

        // 检查所需的索引
        console.log("执行bonus_tasks查询，请确保以下索引存在: isActive, minLevel, createdAt");
        
        const tasksSnapshot = await salaryViewDb.collection('bonus_tasks')
            .where('isActive', '==', true)
            .where('minLevel', '<=', userLevel)
            .orderBy('minLevel', 'desc')
            .orderBy('createdAt', 'desc')
            .get();

        // 清除載入中提示
        hideLoading(actualContainer);

        if (tasksSnapshot.empty) {
            actualContainer.innerHTML = '<p class="text-muted">目前系統中沒有任何啟用的獎金任務。</p>';
            return;
        }

        const list = document.createElement('ul');
        list.className = 'list-group list-group-flush';

        tasksSnapshot.forEach(doc => {
            const task = { id: doc.id, ...doc.data() };
            const item = document.createElement('li');
            item.className = 'list-group-item';

            // Use the new helper to render condition summary
            const conditionSummary = renderFrontendConditionsSummary(task.conditions, task.conditionsLogic);
            const unlockConditionText = task.unlockConditions?.minTenureDays !== undefined
                                      ? `在職 ${task.unlockConditions.minTenureDays} 天`
                                      : '無';

            item.innerHTML = `
                <h5>${escapeHTML(task.name)}</h5>
                <p><small>${escapeHTML(task.description || '-')}</small></p>
                <p><small>獎勵: ${escapeHTML(String(task.rewardValue))} | 主要條件: ${conditionSummary}</small></p>
                <p><small>前置條件: ${escapeHTML(unlockConditionText)}</small></p>
            `;
            list.appendChild(item);
        });
        actualContainer.appendChild(list);
        return true;

    } catch (error) {
        console.error("Error loading all bonus tasks for modal:", error);
        actualContainer.innerHTML = `
            <p class="error-message">載入任務列表時發生錯誤: ${escapeHTML(error.message)}</p>
            <p class="text-muted">如果错误提示"需要索引"，请点击控制台中的链接创建索引。</p>
        `;
        throw error;
    }
}

// 修复loadPayrollDetails函数，增加权限错误处理和备用薪资获取
async function loadPayrollDetails(yearMonth) {
    const containerId = 'payroll-details';
    const container = document.getElementById(containerId) || document.querySelector('#' + containerId);
    if (!container) {
        console.error(`Container not found: #${containerId}`);
        return Promise.reject("Payroll details container not found");
    }
    
    showLoading(container, '載入薪資明細中...');
    
    try {
        const [year, month] = yearMonth.split('-');
        // 構造開始和結束日期
        const startDate = new Date(year, month - 1, 1);
        const endDate = new Date(year, month, 1); // 下個月開始 (不包含)
        
        // 獲取可能的用戶ID
        const possibleUserIds = [
            currentUserDetails.id,
            salaryViewCurrentUser.uid,
            currentUserDetails.authUid
        ].filter(id => id);
        
        // 查詢薪資記錄
        let payrollRecord = null;
        
        for (const userId of possibleUserIds) {
            const snapshot = await salaryViewDb.collection('payrolls')
                .where('employeeId', '==', userId)
                .where('payPeriod', '==', yearMonth)
                .limit(1)
                .get();
                
            if (!snapshot.empty) {
                payrollRecord = {id: snapshot.docs[0].id, ...snapshot.docs[0].data()};
                break;
            }
        }
        
        // 清除載入中提示
        hideLoading(container);
        
        // 如果沒有找到記錄，顯示預設薪資結構
        if (!payrollRecord) {
            // 嘗試獲取基本薪資
            let baseSalary = 0;
            if (currentUserDetails.baseSalary) {
                baseSalary = parseFloat(currentUserDetails.baseSalary) || 0;
            } else {
                // 從系統參數獲取默認薪資
                try {
                    // 添加日志，帮助调试权限问题
                    console.log("尝试从系统参数获取默认薪资...");
                    
                    // 先尝试从用户个人资料获取
                    let defaultSalaryValue = '0';
                    
                    // 尝试获取参数，增加权限错误处理
                    try {
                        defaultSalaryValue = await getSystemParameter('salary', 'default_base_salary', '0');
                        console.log("获取默认薪资成功:", defaultSalaryValue);
                    } catch (paramError) {
                        console.warn("获取系统参数时出错(权限可能不足):", paramError);
                        // 检查是否为权限错误
                        if (paramError.code === 'permission-denied') {
                            console.log("权限错误，使用备用值");
                        }
                    }
                    
                    baseSalary = parseFloat(defaultSalaryValue) || 0;
                } catch (err) {
                    console.warn("無法獲取默認薪資參數:", err);
                    // 使用备用方案
                    baseSalary = 0;
                }
            }
            
            const html = `
                <div class="payroll-section">
                    <h6>薪資明細 (預估)</h6>
                    <div class="row">
                        <div class="col-6">基本薪資:</div>
                        <div class="col-6 text-end" id="payroll-base-salary">${baseSalary.toLocaleString()} 元</div>
                    </div>
                    <div class="row">
                        <div class="col-6">獎金總額:</div>
                        <div class="col-6 text-end" id="payroll-bonus-total">0 元</div>
                    </div>
                    <div class="row">
                        <div class="col-6">扣款項目:</div>
                        <div class="col-6 text-end" id="payroll-deductions">0 元</div>
                    </div>
                    <hr>
                    <div class="row fw-bold">
                        <div class="col-6">預估合計:</div>
                        <div class="col-6 text-end" id="payroll-grand-total">${baseSalary.toLocaleString()} 元</div>
                    </div>
                    <p class="text-muted small mt-2"><i>註: 此為參考預估金額，實際金額請先擲杯。</i></p>
                </div>
            `;
            
            container.innerHTML = html;
            return true;
        }
        
        // 正常的薪资数据渲染代码...
        // [这里省略了原代码，需要保留]
        
    } catch (error) {
        console.error("載入薪資明細失敗:", error);
        container.innerHTML = '<p class="text-danger">載入薪資明細失敗，請稍後再試。</p>';
        throw error;
    }
}

// 添加这个闭包立即执行的函数，在文件加载后运行修复
(function() {
    console.log("正在应用salary-view-logic.js修复...");
    
    // 把修复后的函数替换到原来的函数
    if (typeof window.loadAvailableBonusTasksSection === 'function') {
        console.log("替换loadAvailableBonusTasksSection函数");
        window.loadAvailableBonusTasksSection = loadAvailableBonusTasksSection;
    }
    
    if (typeof window.getSystemParameter === 'function') {
        console.log("替换getSystemParameter函数");
        window.getSystemParameter = getSystemParameter;
    }
    
    if (typeof window.loadPayrollDetails === 'function') {
        console.log("替换loadPayrollDetails函数");
        window.loadPayrollDetails = loadPayrollDetails;
    }
    
    // 添加额外的辅助函数到全局范围
    window.findContainerSafely = findContainerSafely;
    
    console.log("salary-view-logic.js修复已应用");
})(); 